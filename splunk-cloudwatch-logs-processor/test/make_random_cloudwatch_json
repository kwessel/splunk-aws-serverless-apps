#!  /usr/bin/env python3

import argparse
import os
import random
import string
import sys

from attrdict import AttrDict
from datetime import datetime, timedelta, timezone

from jinja2 import Environment, Template

#   [17/Dec/2018:17:28:19 +0000]
FMT_STRFTIME = '%d/%b/%Y:%H:%M:%S %z'

def generate_random_log_event(dt):
    str_logevent = r'10.224.242.91 - - [{0}] \"{1} /jrr/{2}/ HTTP/1.1\" 200 {3}'

    fmt_logevent = \
        (str_logevent.format \
            (dt.strftime(FMT_STRFTIME),
             zzz_method(),
             zzz_alpha_string(8),
             random.randrange(40, 1000)
            )
        )

    event = \
        {
        'id'            : zzz_digits(40),
        'timestamp'     : int(1000 * dt.timestamp()),
    #   'message'       : r'10.224.242.91 - - [{0}] \"GET /jrr/ HTTP/1.1\" 200 45' \
        'message'       : fmt_logevent,
        }

    return event

def main(argv):
    #   Don't buffer standard output.
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', -1)

    parser = argparse.ArgumentParser()

    parser.add_argument \
        ('--verbose', dest='verbose', action='count', default=0,
         help='verbosity level')

    #   Parse command-line arguments.
    arg = parser.parse_args()

    now  = datetime.now(timezone.utc)
    then = now - timedelta(minutes=34, seconds=46)

    #print(now.strftime(FMT_STRFTIME))

    TEMPLATE_NAME   = 'cloudwatch.j2'

    jinja_env = Environment()

    with open(TEMPLATE_NAME, 'r') as stream:
        template = Template(stream.read())

    jinjadict = \
        {
        'owner'         : zzz_digits(16),
        'log_group'     : '/service/roma',
        'log_events'    : [],
        }

    event_range = range(random.randrange(1, 6))

    dt_list = []
    dt_list.extend([zzz_datetime(now) for r in event_range ])
    dt_list.sort()

    for i in event_range:
        event = generate_random_log_event(dt_list[i])
        jinjadict['log_events'].append(event)

    print(template.render(jinjadict))

    return 0

_method_list = [ 'GET', 'HEAD', 'POST', 'PUT' ]

#####

def zzz_datetime(dt):
    return dt - timedelta \
        (minutes=random.randrange(0, 12), seconds=random.randrange(0, 60))

#####

def zzz_digits(l):
    digits = ''

    for i in range(l):
        digits += random.choice(string.digits)

    return digits

#####

def zzz_alpha_string(l):
    str = ''

    for i in range(l):
        str += random.choice(string.ascii_lowercase)

    return str

#####

def zzz_method():
    return random.choice(_method_list)

#####

if __name__ == '__main__':
    sys.exit(main(sys.argv))
